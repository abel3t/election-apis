generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
    id              String              @id @default(cuid())
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt
    email           String              @unique(map: "Account.email_unique")
    firstName       String
    lastName        String
    status          EnumAccountStatus   @default(Active)
    role            EnumAccountRole     @default(Church)
    elections       Election[]
}

model Election {
    id              String              @id @default(cuid())
    name            String
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt
    status          EnumElectionStatus  @default(Active)
    accountId       String
    maxSelected     Int                 @default(5)
    account         Account             @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    candidates      Candidate[]
    codes           Code[]
    votes           Vote[]
    isDeleted       Boolean             @default(false)
}

model Candidate {
    id              String              @id @default(cuid())
    name            String
    imageUrl        String?
    smallGroup      String?
    electionId      String
    election        Election            @relation(fields: [electionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt
    votes           Vote[]
    isDeleted       Boolean             @default(false)

    @@index([electionId], map: "Candidate.electionId_index")
}

model Code {
    id              String              @id @default(cuid())
    text            String
    isActive        Boolean             @default(true)
    isUsed          Boolean             @default(false)
    downloaded      Int                 @default(0)
    createdAt       DateTime            @default(now())
    electionId      String
    isDeleted       Boolean             @default(false)
    election        Election            @relation(fields: [electionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    votes           Vote[]
}

model Vote {
    id              String              @id @default(cuid())
    codeId          String
    code            Code                @relation(fields: [codeId], references: [id])
    candidateId     String
    candidate       Candidate           @relation(fields: [candidateId], references: [id])
    electionId      String
    election        Election            @relation(fields: [electionId], references: [id])
    createdAt       DateTime            @default(now())

    @@unique([electionId, codeId, candidateId], map: "Vote.electionId_codeId_candidateId_unique")
}

enum EnumAccountStatus {
    Active
    Pending
    Deleted
}

enum EnumAccountRole {
    Admin
    Church
}

enum EnumElectionStatus {
    Active
    Closed
}